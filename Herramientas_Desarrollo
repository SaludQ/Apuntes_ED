#**HERRAMIENTAS DE DESARROLLO**

##**Introducción**

**1. ¿Para qué sirve un compilador? ¿Qué tipo de archivo obtenemos tras compilar?**
Un compilador sirve para traducir el programa hecho en lenguaje de programación, a un lenguaje de máquina que pueda ser comprendido por el equipo y pueda ser procesado o ejecutado por este.
El tipo de archivo que se genera es uno ejecutable.

**2. ¿Para qué sirve un enlazador? ¿Qué tipo de archivo obtenemos tras enlazar?**
Un enlazador sirve para unir el código objeto del programa que se está desarrollando con el código objeto de subprogramas que utilices para el desarrollo.
 En programación, un enlazador es un módulo o programa que junta los ficheros de código objetos (generados en la primer parte de la compilación), la información de todos los recursos necesarios (biblioteca), elimina los recursos que no se necesitan y enlaza el código objeto con sus bibliotecas.
 Tras enlazar se genera un archivo ejecutable o biblioteca.

**3. ¿Para qué sirve un intérprete? ¿Obtenemos algún archivo tras interpretar?**
Un intérprete sirve para traducir y ejecutar el código línea a línea, normalmente sin guardar el resultado de dicha traducción. Los programas interpretados suelen ser más lentos que los compilados debido a la necesidad de traducir el programa mientras se ejecuta.
No se obtiene ningún archivo al interpretar un código.

**4. Explica cada uno de los siguientes conceptos e indica la relación entre ellos.**
**- Código fuente:** Texto redactado en un lenguaje de programación determinado con los pasos a seguir de un programa.
**- Código objeto:** Conjunto de instrucciones y datos escritos en un lenguaje que entiende el ordenador directamente: binario o código máquina. Provienen de la traducción de cierto código fuente, es un fragmento del programa final y es específico de la plataforma de ejecución.
**- Código binario:** Sistema numérico usado para la representación de textos, o procesadores de instrucciones de computadora, utilizando el sistema binario. Este sistema es un método de representación de números a la base 2, en el que cada lugar de un número corresponde a una potencia de 2. El código binario usa sólo los dígitos 1 (abierto) y 0 (cerrado).


**5. ¿Qué tipo de código es el *bytecode* generado por el compilador Java?**
El bytecode es un código intermedio más abstracto que el código máquina. Habitualmente es tratado como un archivo binario que contiene un programa ejecutable similar a un módulo objeto, que es un archivo binario producido por el compilador cuyo contenido es el código objeto o código máquina . 

**Bibliografía:**
- http://culturacion.com/que-es-un-compilador/
- http://michelletorres.mx/que-es-un-compilador-y-como-funciona/
- https://es.wikipedia.org/wiki/Compilador
- http://www.carlospes.com/minidiccionario/enlazador.php
- http://www.alegsa.com.ar/Dic/enlazador.php
- https://sites.google.com/site/informaticaactualysencilla/software/enlazadores
- http://culturacion.com/que-es-un-interprete/
- https://www.ecured.cu/Int%C3%A9rprete_(Inform%C3%A1tica) 
- https://es.wikipedia.org/wiki/Int%C3%A9rprete_(inform%C3%A1tica) 
- https://www.1and1.es/digitalguide/paginas-web/desarrollo-web/codigo-fuente-definicion-con-ejemplos/
-https://es.wikipedia.org/wiki/C%C3%B3digo_fuente
- http://entornosdedesarrollo.blogspot.com/2011/11/codigo-fuente-codigo-objeto-y-codigo.html
- https://es.wikipedia.org/wiki/C%C3%B3digo_binario
- https://techlandia.com/codigo-binario-info_292179/
- https://es.wikipedia.org/wiki/Bytecode

##**Herramientas de Desarrollo**

**2. Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el código: ¿compilación o interpretación?**
- **bash:** interpretación
- **python:** interpretación
- **php:** interpretación
- **javascript:** interpretación
- **c:** compilación
- **c++:** compilación
- **java:** compilación
- **ruby:** interpretación
- **go:** compilación
- **rust:** compilación
- **lisp:** interpretación
- **nasm:** compilación

**3. Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux.**
- **bash:** terminal
- **python:** python
- **php:** php
- **javascript:** node
- **c:** gcc
- **c++:** g++
- **java:** default-jdk y default-jdre
- **ruby:** ruby
- **go:** golang
- **rust:** rustc
- **lisp:** clisp
- **nasm:** nasm

**4. Investiga y averigua que extensión tienen los archivos de código fuente de los siguientes lenguajes:**
- **bash:** .sh
- **python:** .py
- **php:** .php
- **javascript:** .js
- **c:** .c
- **c++:** .cpp
- **java:** .java
- **ruby:** .rb
- **go:** .go
- **rust:** .rs
- **lisp:** .lisp
- **ensamblador nasm:** .asm

**5. Scripts ejecutables para los lenguajes interpretados. Edita los scripts para los siguientes lenguajes:**
- **bash:** 
1. Editamos archivo hola.sh
	#!/usr/bin/env bash
echo "Hola mundo"
2. Damos permisos de ejecución
chmod +x hola.sh
3. Ejecutamos
./hola.sh
- **python:**
1. Editamos archivo hola.py
	#!/usr/bin/env python
print "Hola mundo"
2. Damos permisos de ejecución
chmod +x hola.py
3. Ejecutamos
./hola.py
- **php:**
1. Editamos archivo hola.php
	#!/usr/bin/env php
<?php
	echo "Hola mundo\n"
?>
2. Damos permisos de ejecución
chmod +x hola.php
3. Ejecutamos
./hola.php
- **javascript:**
1. Editamos archivo hola.js
	#!/usr/bin/env node
console.log('Hola mundo');
2. Damos permisos de ejecución
chmod +x hola.js
3. Ejecutamos
./hola.js
- **java:**
1. Empaquetamos
jar cvfe hola.jar Hola Hola.class 
2. Damos permisos de ejecución
chmod +x hola.jar
3. Ejecutamos
./hola.jar
- **ruby:**
1. Editamos archivo hola.rb
	#!/usr/bin/env ruby
puts "Hola mundo"
2. Damos permisos de ejecución
chmod +x hola.rb
3. Ejecutamos
./hola.rb
- **go:**
- **rust:**
- **lisp:**
1. Editamos archivo hola.lisp
	#!/usr/bin/env clisp
(format t "Hola mundo")
2. Damos permisos de ejecución
chmod +x hola.lisp
3. Ejecutamos
./hola.lisp

**6. ¿Qué extensión tienen los archivos de código objeto?**
- **bash:** .shc
- **python:** .pyc
- **php:** 
- **javascript:** 
- **c:** .o
- **c++:** .o
- **java:** .class
- **ruby:**
- **go:** 
- **rust:** 
- **lisp:** 
- **nasm:** 

**7. Lenguaje C. Código en varios archivos. Obtener el código objeto a partir del código fuente de los 3 archivos siguientes:**
[Aquí se encuentran los archivos .c, .o y el programa.](https://github.com/SaludQ/Apuntes_ED/tree/master/LenguajeC) 

**8. Lenguaje C. Código en varios archivos. Obtener el código binario ejecutable a partir del código objeto de los 3 archivos anteriores:**
En el enlace del ejercicio 7.

**9. Lenguaje C++. Código en varios archivos. Obtener el código objeto a partir del código fuente de los 3 archivos siguientes:**
[Aquí se encuentran los archivos .cpp, .o y el programa.](https://github.com/SaludQ/Apuntes_ED/tree/master/LenguajeC%2B) 

**10. Lenguaje C++. Código en varios archivos. Obtener el código binario ejecutable a partir del código objeto de los 3 archivos anteriores:**
En el enlace del ejercicio 9.

**11. Bibliotecas. Define que se entiende por biblioteca o librería y los tipos que existen.**
Es un conjunto de implementaciones funcionales, codificadas en un lenguaje de programación, que ofrece una interfaz bien definida para la funcionalidad que se invoca.
A diferencia de un programa ejecutable, el comportamiento que implementa una biblioteca no espera ser utilizada de forma autónoma (un programa sí: tiene un punto de entrada principal), sino que su fin es ser utilizada por otros programas, independientes y de forma simultánea. Por otra parte, el comportamiento de una biblioteca no tiene por qué diferenciarse demasiado del que pudiera especificarse en un programa. Es más, unas bibliotecas pueden requerir de otras para funcionar, pues el comportamiento que definen refina, o altera, el comportamiento de la biblioteca original; o bien la hace disponible para otra tecnología o lenguaje de programación.
Las bibliotecas pueden vincularse a un programa (o a otra biblioteca) en distintos puntos del desarrollo o la ejecución, según el tipo de vínculo que se quiera establecer, existen diferentes tipos de bibliotecas:
- Estática.
- Dinámica.
- Remota.
- Plugins.

**12. Bibliotecas. ¿Qué tipo es el más utilizado actualmente? ¿Por qué?**
Actualmente, lo normal es distribuir la funcionalidad básica de una aplicación en bibliotecas dinámicas y, la funcionalidad opcional en forma de plugins. Esto se debe a que al tener una biblioteca dinámica, la aplicación pesa menos y puede hacer uso de la misma sólo cuando le sea necesario.

**13. Bibliotecas. Crea una biblioteca dinámica en C que proporcione las funciones para sumar, restar, multiplicar y dividir 2 números enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.**


**14. Bibliotecas. Crea una biblioteca dinámica en Java que proporcione las funciones para sumar, restar, multiplicar y dividir 2 números enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.**


**15. Bibliotecas. Busca información y explica las ventajas y desventajas de usar bibliotecas estáticas.**
Las bibliotecas estáticas son aquellas en las que el código de dicha biblioteca dentro del código del programa que la usa. Dentro de sus **ventajas** se encuentra que las actualizaciones de la biblioteca no le afectan, ya que no se modifica en el propio código del programa y, que el programa es autocontenido, es decir, que dentro de su código incluye todo lo que necesita. Por otro lado, sus **desventajas** son que el tamaño del programa es mayor y, que como dijimos en las ventajas, no se beneficia de las actualizaciones de la biblioteca.

**16. Bibliotecas. Busca información y explica las ventajas y desventajas de usar bibliotecas dinámicas.**
Las bibliotecas dinámicas son aquellas en la que su código no se incluye en el código del programa, si no que se realiza un vínculo a dicha biblioteca. Tiene como **ventajas** que el tamaño del programa es menor y que las actualizaciones le afectan automáticamente. Como **desventajas** encontramos que el programa no es autocontenido, por lo que se tiene que dar el enlazado con la biblioteca y, que las actualizaciones no le afectan tanto positiva como negativamente.

**17. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo ejecutable para código fuente en C con make. Haz uso de un buildfile.**


**18. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Ant. Haz uso de un buildfile.**

**19. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Maven. Haz uso de un buildfile.**


**20. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Gradle. Haz uso de un buildfile.**


**21. CMake. Automatiza el proceso de compilación de ejecutable y bibliotecas, su enlazado y la generación del archivo ejecutable para código fuente en C++. Crea un buildfile con CMake.**
